# -*- coding: utf-8 -*-
"""DataSetC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dmVILSZNBZQr5nlSTDVSwusOwbg6smxV
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

df = pd.read_csv('/content/Occupancy_Estimation.csv')

df = df.drop(['Date', 'Time'], axis=1)

X = df.drop('Room_Occupancy_Count', axis=1)
y = df['Room_Occupancy_Count']

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y,
                                                    test_size=0.2,
                                                    random_state=42)

lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

mlp = MLPRegressor(hidden_layer_sizes=(50, 50), max_iter=1000, random_state=42)
mlp.fit(X_train, y_train)
y_pred_mlp = mlp.predict(X_test)

def evaluate_model(y_true, y_pred, model_name):
    r2 = r2_score(y_true, y_pred)
    rmse = np.sqrt(mean_squared_error(y_true, y_pred))
    mae = mean_absolute_error(y_true, y_pred)
    mape = np.mean(np.abs((y_true - y_pred) / y_true)) * 100

    print(f"\n{model_name}")
    print(f"R²: {r2:.4f}")
    print(f"RMSE: {rmse:.4f}")
    print(f"MAE: {mae:.4f}")
    print(f"MAPE: {mape:.2f}%")

    return {'Model': model_name, 'R2': r2, 'RMSE': rmse, 'MAE': mae, 'MAPE': mape}

results_lr = evaluate_model(y_test, y_pred_lr, "Regressão Linear")
results_mlp = evaluate_model(y_test, y_pred_mlp, "MLP Regressor")

print("\nEstatísticas da variável alvo (Room_Occupancy_Count):")
print(f"Média: {y.mean():.4f}")
print(f"Variância: {y.var():.4f}")
print(f"Desvio padrão: {y.std():.4f}")

results_df = pd.DataFrame([results_lr, results_mlp])

metrics = ['R2', 'RMSE', 'MAE', 'MAPE']

for metric in metrics:
    plt.figure(figsize=(6, 4))
    sns.barplot(x='Model', y=metric, data=results_df)
    plt.title(f'Comparação de {metric}')
    plt.ylabel(metric)
    plt.xlabel('Modelo')
    plt.tight_layout()
    plt.show()


def plot_diagnostics(y_true, y_pred, model_name):
    residuals = y_true - y_pred

    plt.figure(figsize=(6, 4))
    sns.scatterplot(x=y_true, y=y_pred, alpha=0.5)
    plt.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
    plt.title(f'{model_name} - Reais vs Preditos')
    plt.xlabel('Valores Reais')
    plt.ylabel('Valores Preditos')
    plt.tight_layout()
    plt.show()

    plt.figure(figsize=(6, 4))
    sns.histplot(residuals, bins=50, kde=True)
    plt.title(f'{model_name} - Distribuição dos Resíduos')
    plt.xlabel('Resíduos')
    plt.ylabel('Frequência')
    plt.tight_layout()
    plt.show()

plot_diagnostics(y_test, y_pred_lr, "Regressão Linear")
plot_diagnostics(y_test, y_pred_mlp, "MLP Regressor")